{
  "address": "0x2359Ab45aC9c5B575152bE21a19c33c138e58DdA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimCurrent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swappedTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtAmount",
          "type": "uint256"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UpdateReward",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "claimCurrentEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "claimFrozenEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decelerationTable",
      "outputs": [
        {
          "internalType": "uint256[20]",
          "name": "ret",
          "type": "uint256[20]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "getEpochBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "traded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFirstUserUnprocessedEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "firstUserUnprocessedEpoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserEpochBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "lastTime",
          "type": "uint40"
        },
        {
          "internalType": "uint216",
          "name": "lastValue",
          "type": "uint216"
        },
        {
          "internalType": "uint256",
          "name": "firstUnprocessedEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentEpoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "erc20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "erc20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateRewardNonLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "updateRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "value",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "valueForTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5636fa874ed86efda3a13b30782b6f2f07ffb66d5bae49ac278dfebc785dc5d1",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x2359Ab45aC9c5B575152bE21a19c33c138e58DdA",
    "transactionIndex": 26,
    "gasUsed": "2199462",
    "logsBloom": "0x
    "blockHash": "0x0939f7644b54ea9b13f0834dcf7ce9653c003c8ffca07d9090e35a28ad6b7278",
    "transactionHash": "0x5636fa874ed86efda3a13b30782b6f2f07ffb66d5bae49ac278dfebc785dc5d1",
    "logs": [],
    "blockNumber": 13132036,
    "cumulativeGasUsed": "3881668",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x111111111117dC0aa78b770fA6A738034120C302",
    "100000000000000000000"
  ],
  "solcInputHash": "87a5f14f8dd6ec005f3e72827a7d2639",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimCurrent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swappedTokenAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateReward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"claimCurrentEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"claimFrozenEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decelerationTable\",\"outputs\":[{\"internalType\":\"uint256[20]\",\"name\":\"ret\",\"type\":\"uint256[20]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getEpochBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFirstUserUnprocessedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstUserUnprocessedEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserEpochBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"lastTime\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"lastValue\",\"type\":\"uint216\"},{\"internalType\":\"uint256\",\"name\":\"firstUnprocessedEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateRewardNonLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"valueForTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeCollector.sol\":\"FeeCollector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/FeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./utils/BalanceAccounting.sol\\\";\\n\\n\\ncontract FeeCollector is IFeeCollector, BalanceAccounting {\\n    using SafeERC20 for IERC20;\\n\\n    event Trade(address indexed token, address indexed trader, uint256 amount, uint256 boughtAmount);\\n    event UpdateReward(address indexed token, address indexed receiver, uint256 amount);\\n    event ClaimFrozen(address indexed token, address indexed receiver, uint256 tokenAmount, uint256 swappedTokenAmount);\\n    event ClaimCurrent(address indexed receiver, uint256 amount);\\n\\n    struct EpochBalance {\\n        mapping(address => uint256) balances;\\n        uint256 totalSupply;\\n        uint256 traded;\\n        uint256 tokenBalance;\\n    }\\n\\n    struct TokenInfo {\\n        uint40 lastTime;\\n        uint216 lastValue;\\n        mapping(uint256 => EpochBalance) epochBalance;\\n        uint256 firstUnprocessedEpoch;\\n        uint256 currentEpoch;\\n        mapping(address => uint256) firstUserUnprocessedEpoch;\\n    }\\n\\n    uint256 private constant _MAX_TIME = 0xfffff;\\n\\n    mapping(IERC20 => TokenInfo) public tokenInfo;\\n    IERC20 public immutable token;\\n    uint256 public immutable minValue;\\n    uint8 public immutable decimals;\\n\\n    constructor(\\n        IERC20 _token,\\n        uint256 _minValue\\n    ) {\\n        token = _token;\\n        minValue = _minValue;\\n        decimals = IERC20Metadata(address(_token)).decimals();\\n    }\\n\\n    function name() external view returns(string memory) {\\n        return string(abi.encodePacked(\\\"FeeCollector: \\\", IERC20Metadata(address(token)).name()));\\n    }\\n\\n    function symbol() external view returns(string memory) {\\n        return string(abi.encodePacked(\\\"fee-\\\", IERC20Metadata(address(token)).symbol()));\\n    }\\n\\n    function getEpochBalance(IERC20 _token, uint256 epoch) external view returns(uint256 totalSupply, uint256 traded, uint256 tokenBalance) {\\n        EpochBalance storage epochBalance = tokenInfo[_token].epochBalance[epoch];\\n        (totalSupply, traded, tokenBalance) = (epochBalance.totalSupply, epochBalance.traded, epochBalance.tokenBalance);\\n    }\\n\\n    function getUserEpochBalance(IERC20 _token, uint256 epoch, address user) external view returns(uint256 balance) {\\n        balance = tokenInfo[_token].epochBalance[epoch].balances[user];\\n    }\\n\\n    function getFirstUserUnprocessedEpoch(IERC20 _token, address user) external view returns(uint256 firstUserUnprocessedEpoch) {\\n        firstUserUnprocessedEpoch = tokenInfo[_token].firstUserUnprocessedEpoch[user];\\n    }\\n\\n    function decelerationTable() external pure returns(uint256[20] memory ret) {\\n        ret[0] = 0.9999e36;\\n        for (uint256 i = 1; i < 20; ++i) {\\n            ret[i] = ret[i-1] * ret[i-1] / 1e36;\\n        }\\n    }\\n\\n    function value(IERC20 _token) public view returns(uint256 result) {\\n        return valueForTime(block.timestamp, _token);\\n    }\\n\\n    function valueForTime(uint256 time, IERC20 _token) public view returns(uint256 result) {\\n        uint256 secs = tokenInfo[_token].lastTime;\\n        result = tokenInfo[_token].lastValue;\\n\\n        secs = time - secs;\\n        if (secs > _MAX_TIME) {\\n            secs = _MAX_TIME;\\n        }\\n        if (result < minValue) {\\n            result = minValue;\\n        }\\n\\n        uint256 minValue_ = minValue;\\n        assembly { // solhint-disable-line no-inline-assembly\\n            if and(secs, 0x00000F) {\\n                if and(secs, 0x000001) {\\n                    result := div(mul(result, 999900000000000000000000000000000000), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000002) {\\n                    result := div(mul(result, 999800010000000000000000000000000000), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000004) {\\n                    result := div(mul(result, 999600059996000100000000000000000000), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000008) {\\n                    result := div(mul(result, 999200279944006999440027999200010000), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n            }\\n\\n            if and(secs, 0x0000F0) {\\n                if and(secs, 0x000010) {\\n                    result := div(mul(result, 998401199440181956328006856128688560), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000020) {\\n                    result := div(mul(result, 996804955043593987145855519554957648), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000040) {\\n                    result := div(mul(result, 993620118399461429792290614928235372), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000080) {\\n                    result := div(mul(result, 987280939688159750172898466482272707), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n            }\\n\\n            if and(secs, 0x000F00) {\\n                if and(secs, 0x000100) {\\n                    result := div(mul(result, 974723653871535730138973062438582481), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000200) {\\n                    result := div(mul(result, 950086201416677390961738571086337286), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000400) {\\n                    result := div(mul(result, 902663790122371280016479918855854806), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000800) {\\n                    result := div(mul(result, 814801917998084346828628782199508463), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n            }\\n\\n            if and(secs, 0x00F000) {\\n                if and(secs, 0x001000) {\\n                    result := div(mul(result, 663902165573356968243491567819400493), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x002000) {\\n                    result := div(mul(result, 440766085452993090398118811102456830), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x004000) {\\n                    result := div(mul(result, 194274742085555207178862579417407102), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x008000) {\\n                    result := div(mul(result, 37742675412408995610179844414960649), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n            }\\n\\n            if and(secs, 0x0F0000) {\\n                if and(secs, 0x010000) {\\n                    result := div(mul(result, 1424509547286462546864068778806188), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x020000) {\\n                    result := div(mul(result, 2029227450310282474813662564103), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x040000) {\\n                    result := div(mul(result, 4117764045092769930387910), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x080000) {\\n                    result := div(mul(result, 16955980731058), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external override {\\n        for (uint i = 0; i < receivers.length; i++) {\\n            _updateReward(IERC20(msg.sender), receivers[i], amounts[i]);\\n        }\\n    }\\n\\n    function updateReward(address receiver, uint256 amount) external override {\\n        _updateReward(IERC20(msg.sender), receiver, amount);\\n    }\\n\\n    function updateRewardNonLP(IERC20 erc20, address receiver, uint256 amount) external override {\\n        _updateReward(erc20, receiver, amount);\\n        erc20.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function trade(IERC20 erc20, uint256 amount, uint256 minReturn) external {\\n        TokenInfo storage _token = tokenInfo[erc20];\\n        uint256 currentEpoch = _token.currentEpoch;\\n        uint256 firstUnprocessedEpoch = _token.firstUnprocessedEpoch;\\n        EpochBalance storage epochBalance = _token.epochBalance[firstUnprocessedEpoch];\\n        EpochBalance storage currentEpochBalance = _token.epochBalance[currentEpoch];\\n\\n        uint256 currentEpochStored = currentEpoch;\\n\\n        uint256 unprocessedTotalSupply = epochBalance.totalSupply;\\n        uint256 unprocessedTokenBalance = unprocessedTotalSupply - epochBalance.traded;\\n        uint256 tokenBalance = unprocessedTokenBalance;\\n        if (firstUnprocessedEpoch != currentEpoch) {\\n            tokenBalance += currentEpochBalance.totalSupply;\\n        }\\n\\n        uint256 returnAmount = amount * tokenBalance / value(erc20);\\n        require(tokenBalance >= returnAmount, \\\"not enough tokens\\\");\\n        require(returnAmount >= minReturn, \\\"minReturn not met\\\");\\n\\n        if (firstUnprocessedEpoch == currentEpoch) {\\n            currentEpoch += 1;\\n        }\\n\\n        _updateTokenState(erc20, -int256(returnAmount), currentEpochStored, firstUnprocessedEpoch);\\n\\n        if (returnAmount <= unprocessedTokenBalance) {\\n            if (returnAmount == unprocessedTokenBalance) {\\n                _token.firstUnprocessedEpoch += 1;\\n            }\\n\\n            epochBalance.traded += returnAmount;\\n            epochBalance.tokenBalance += amount;\\n        } else {\\n            uint256 amountPart = unprocessedTokenBalance * amount / returnAmount;\\n\\n            epochBalance.traded = unprocessedTotalSupply;\\n            epochBalance.tokenBalance += amountPart;\\n\\n            currentEpochBalance.traded += returnAmount - unprocessedTokenBalance;\\n            currentEpochBalance.tokenBalance += amount - amountPart;\\n\\n            _token.firstUnprocessedEpoch += 1;\\n            currentEpoch += 1;\\n        }\\n\\n        if (currentEpoch != currentEpochStored) {\\n            _token.currentEpoch = currentEpoch;\\n        }\\n\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        erc20.safeTransfer(msg.sender, returnAmount);\\n        emit Trade(address(erc20), msg.sender, amount, returnAmount);\\n    }\\n\\n    function claim(IERC20[] memory pools) external {\\n        for (uint256 i = 0; i < pools.length; ++i) {\\n            TokenInfo storage _token = tokenInfo[pools[i]];\\n            _collectProcessedEpochs(msg.sender, _token, _token.currentEpoch, _token.firstUnprocessedEpoch);\\n        }\\n\\n        uint256 userBalance = balanceOf(msg.sender);\\n        if (userBalance > 1) {\\n            // Avoid erasing storage to decrease gas footprint for payments\\n            unchecked {\\n                uint256 withdrawn = userBalance - 1;\\n                _burn(msg.sender, withdrawn);\\n                token.safeTransfer(msg.sender, withdrawn);\\n            }\\n        }\\n    }\\n\\n    function claimCurrentEpoch(IERC20 erc20) external {\\n        TokenInfo storage _token = tokenInfo[erc20];\\n        EpochBalance storage _epochBalance = _token.epochBalance[_token.currentEpoch];\\n        uint256 userBalance = _epochBalance.balances[msg.sender];\\n        if (userBalance > 0) {\\n            _epochBalance.balances[msg.sender] = 0;\\n            _epochBalance.totalSupply -= userBalance;\\n            erc20.safeTransfer(msg.sender, userBalance);\\n            emit ClaimCurrent(msg.sender, userBalance);\\n        }\\n    }\\n\\n    function claimFrozenEpoch(IERC20 erc20) external {\\n        TokenInfo storage _token = tokenInfo[erc20];\\n        uint256 firstUnprocessedEpoch = _token.firstUnprocessedEpoch;\\n        uint256 currentEpoch = _token.currentEpoch;\\n\\n        require(firstUnprocessedEpoch + 1 == currentEpoch, \\\"Epoch already finalized\\\");\\n        require(_token.firstUserUnprocessedEpoch[msg.sender] == firstUnprocessedEpoch, \\\"Epoch funds already claimed\\\");\\n\\n        _token.firstUserUnprocessedEpoch[msg.sender] = currentEpoch;\\n        EpochBalance storage epochBalance = _token.epochBalance[firstUnprocessedEpoch];\\n        uint256 share = epochBalance.balances[msg.sender];\\n\\n        if (share > 0) {\\n            uint256 totalSupply = epochBalance.totalSupply;\\n            epochBalance.balances[msg.sender] = 0;\\n            epochBalance.totalSupply = totalSupply - share;\\n            uint256 withdrawnERC20 = _transferTokenShare(erc20, totalSupply - epochBalance.traded, share, totalSupply);\\n            uint256 withdrawnToken = _transferTokenShare(token, epochBalance.tokenBalance, share, totalSupply);\\n            epochBalance.tokenBalance -= withdrawnToken;\\n            emit ClaimFrozen(address(erc20), msg.sender, withdrawnERC20, withdrawnToken);\\n        }\\n    }\\n\\n    function _updateReward(IERC20 erc20, address receiver, uint256 amount) private {\\n        TokenInfo storage _token = tokenInfo[erc20];\\n        uint256 currentEpoch = _token.currentEpoch;\\n        uint256 firstUnprocessedEpoch = _token.firstUnprocessedEpoch;\\n\\n        _updateTokenState(erc20, int256(amount), currentEpoch, firstUnprocessedEpoch);\\n\\n        // Add new reward to current epoch\\n        _token.epochBalance[currentEpoch].balances[receiver] += amount;\\n        _token.epochBalance[currentEpoch].totalSupply += amount;\\n\\n        // Collect all processed epochs and advance user token epoch\\n        _collectProcessedEpochs(receiver, _token, currentEpoch, firstUnprocessedEpoch);\\n        emit UpdateReward(address(erc20), receiver, amount);\\n    }\\n\\n    function _updateTokenState(IERC20 erc20, int256 amount, uint256 currentEpoch, uint256 firstUnprocessedEpoch) private {\\n        TokenInfo storage _token = tokenInfo[erc20];\\n\\n        uint256 fee = _token.epochBalance[firstUnprocessedEpoch].totalSupply - _token.epochBalance[firstUnprocessedEpoch].traded;\\n        if (firstUnprocessedEpoch != currentEpoch) {\\n            fee += _token.epochBalance[currentEpoch].totalSupply;\\n        }\\n\\n        uint256 feeWithAmount = (amount >= 0 ? fee + uint256(amount) : fee - uint256(-amount));\\n        (\\n            tokenInfo[erc20].lastTime,\\n            tokenInfo[erc20].lastValue\\n        ) = (\\n            uint40(block.timestamp),\\n            uint216(valueForTime(block.timestamp, erc20) * feeWithAmount / (fee == 0 ? 1 : fee))\\n        );\\n    }\\n\\n    function _transferTokenShare(IERC20 _token, uint256 balance, uint256 share, uint256 totalSupply) private returns(uint256 amount) {\\n        amount = balance * share / totalSupply;\\n        if (amount > 0) {\\n            _token.safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    function _collectProcessedEpochs(address user, TokenInfo storage _token, uint256 currentEpoch, uint256 tokenEpoch) private {\\n        uint256 userEpoch = _token.firstUserUnprocessedEpoch[user];\\n\\n        if (tokenEpoch <= userEpoch) {\\n            return;\\n        }\\n\\n        // Early return for the new users\\n        if (_token.epochBalance[userEpoch].balances[user] == 0) {\\n            _token.firstUserUnprocessedEpoch[user] = currentEpoch;\\n            return;\\n        }\\n\\n        uint256 epochCount = Math.min(2, tokenEpoch - userEpoch); // 1 or 2 epochs\\n\\n        // Claim 1 or 2 processed epochs for the user\\n        uint256 collected = _collectEpoch(user, _token, userEpoch);\\n        if (epochCount > 1) {\\n            collected += _collectEpoch(user, _token, userEpoch + 1);\\n        }\\n        _mint(user, collected);\\n\\n        // Update user token epoch counter\\n        bool emptySecondEpoch = _token.epochBalance[userEpoch + 1].balances[user] == 0;\\n        _token.firstUserUnprocessedEpoch[user] = (epochCount == 2 || emptySecondEpoch) ? currentEpoch : userEpoch + 1;\\n    }\\n\\n    function _collectEpoch(address user, TokenInfo storage _token, uint256 epoch) private returns(uint256 collected) {\\n        uint256 share = _token.epochBalance[epoch].balances[user];\\n        if (share > 0) {\\n            uint256 tokenBalance = _token.epochBalance[epoch].tokenBalance;\\n            uint256 totalSupply = _token.epochBalance[epoch].totalSupply;\\n\\n            collected = tokenBalance * share / totalSupply;\\n\\n            _token.epochBalance[epoch].balances[user] = 0;\\n            _token.epochBalance[epoch].totalSupply = totalSupply - share;\\n            _token.epochBalance[epoch].tokenBalance = tokenBalance - collected;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0692eae6a7365fbb3fd48bdb5d081f9bcac2da51eefd887388dad84b9b9df057\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IFeeCollector {\\n    function updateReward(address receiver, uint256 amount) external;\\n    function updateRewardNonLP(IERC20 erc20, address receiver, uint256 amount) external;\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x5fec5dc36af21d41132dfc6fe5fd48950320ffbea57908b684fc3fc0b0c27247\",\"license\":\"MIT\"},\"contracts/utils/BalanceAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ncontract BalanceAccounting {\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _totalSupply += amount;\\n        unchecked {\\n            _balances[account] += amount;\\n        }\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _balances[account] -= amount;\\n        unchecked {\\n            _totalSupply -= amount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x57e1952440d592f1ee7a884e26d18d8dac379c18aaf02097f9b18aa04e0e0ae2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200289c3803806200289c8339810160408190526200003491620000f8565b6001600160601b0319606083901b1660805260a08190526040805163313ce56760e01b815290516001600160a01b0384169163313ce567916004808301926020929190829003018186803b1580156200008c57600080fd5b505afa158015620000a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c7919062000134565b60f81b7fff000000000000000000000000000000000000000000000000000000000000001660c05250620001609050565b600080604083850312156200010c57600080fd5b82516001600160a01b03811681146200012457600080fd5b6020939093015192949293505050565b6000602082840312156200014757600080fd5b815160ff811681146200015957600080fd5b9392505050565b60805160601c60a05160c05160f81c6126ce620001ce60003960006101ee015260008181610316015281816108b1015281816108d901526108fd0152600081816104c20152818161050d0152818161081201528181610fe1015281816110b7015261152c01526126ce6000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c806370a08231116100d85780639e96b2ce1161008c578063ea8387f611610066578063ea8387f6146103d0578063f5dab7111461041a578063fc0c546a146104bd57600080fd5b80639e96b2ce14610338578063b44b96e11461034b578063bfe6be841461035e57600080fd5b806374d7a5ec116100bd57806374d7a5ec146102f657806395d89b4114610309578063963e63c71461031157600080fd5b806370a08231146102ad57806371646f98146102e357600080fd5b8063313ce5671161012f578063406756861161011457806340675686146102355780634207bd9c1461028757806369f9d91c1461029a57600080fd5b8063313ce567146101e9578063318d9e5d1461022257600080fd5b80631094c48f116101605780631094c48f146101af57806318160ddd146101c45780631a399125146101d657600080fd5b806306fdde031461017c5780630931753c1461019a575b600080fd5b610184610509565b6040516101919190612401565b60405180910390f35b6101ad6101a836600461201a565b6105ef565b005b6101b761065c565b60405161019191906123cf565b6000545b604051908152602001610191565b6101ad6101e4366004611fee565b610713565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610191565b6101ad610230366004612086565b610722565b6101c86102433660046121db565b73ffffffffffffffffffffffffffffffffffffffff928316600090815260026020908152604080832094835260019094018152838220929094168152925290205490565b6101c8610295366004612304565b61083e565b6101c86102a8366004611fd1565b610e2d565b6101c86102bb366004611fd1565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b6101ad6102f1366004611fd1565b610e3f565b6101ad61030436600461219a565b611086565b6101846110b3565b6101c87f000000000000000000000000000000000000000000000000000000000000000081565b6101ad610346366004611fd1565b611185565b6101ad61035936600461221d565b611256565b6103b561036c366004611fee565b73ffffffffffffffffffffffffffffffffffffffff9091166000908152600260208181526040808420948452600194850190915290912091820154908201546003909201549092565b60408051938452602084019290925290820152606001610191565b6101c86103de366004612161565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526002602090815260408083209390941682526004909201909152205490565b610479610428366004611fd1565b600260208190526000918252604090912080549181015460039091015464ffffffffff8316926501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16919084565b6040805164ffffffffff90951685527affffffffffffffffffffffffffffffffffffffffffffffffffffff9093166020850152918301526060820152608001610191565b6104e47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610191565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561057157600080fd5b505afa158015610585573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105cb9190810190612252565b6040516020016105db9190612345565b604051602081830303815290604052905090565b60005b83811015610655576106433386868481811061061057610610612615565b90506020020160208101906106259190611fd1565b85858581811061063757610637612615565b905060200201356115f4565b8061064d81612574565b9150506105f2565b5050505050565b610664611f66565b6ec092e04e5bc5ba2d9eaf8f00000000815260015b601481101561070f576ec097ce7bc90715b34b9f10000000008261069e600184612531565b601481106106ae576106ae612615565b6020020151836106bf600185612531565b601481106106cf576106cf612615565b60200201516106de91906124f4565b6106e891906124b9565b8282601481106106fa576106fa612615565b602002015261070881612574565b9050610679565b5090565b61071e3383836115f4565b5050565b60005b81518110156107af5760006002600084848151811061074657610746612615565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061079e33828360030154846002015461171d565b506107a881612574565b9050610725565b50336000908152600160205260408120549050600181111561071e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81016107f833826118b4565b61083973ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633836118fb565b505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260205260409020547affffffffffffffffffffffffffffffffffffffffffffffffffffff650100000000008204169064ffffffffff1661089c8185612531565b9050620fffff8111156108af5750620fffff5b7f00000000000000000000000000000000000000000000000000000000000000008210156108fb577f000000000000000000000000000000000000000000000000000000000000000091505b7f0000000000000000000000000000000000000000000000000000000000000000600f821615610a1d576001821615610963576ec097ce7bc90715b34b9f10000000006ec092e04e5bc5ba2d9eaf8f0000000084020492508083101561096357809250600091505b60028216156109a1576ec097ce7bc90715b34b9f10000000006ec08df2413e52bce616c26f100000008402049250808310156109a157809250600091505b60048216156109df576ec097ce7bc90715b34b9f10000000006ec0841687ef88da0e0219c93f1000008402049250808310156109df57809250600091505b6008821615610a1d576ec097ce7bc90715b34b9f10000000006ec0706098eb3d8dad71e6823e86df10840204925080831015610a1d57809250600091505b60f0821615610b1e576010821615610a64576ec097ce7bc90715b34b9f10000000006ec048fac88e9b7584c4f0fa400171b0840204925080831015610a6457809250600091505b6020821615610aa2576ec097ce7bc90715b34b9f10000000006ebffa4758bcda710d9e528a11c67150840204925080831015610aa257809250600091505b6040821615610ae0576ec097ce7bc90715b34b9f10000000006ebf5d410e86adaaf35db80d1d605b6c840204925080831015610ae057809250600091505b6080821615610b1e576ec097ce7bc90715b34b9f10000000006ebe24b55f652e45e1ebc842913ab9c3840204925080831015610b1e57809250600091505b610f00821615610c2457610100821615610b67576ec097ce7bc90715b34b9f10000000006ebbb996249761db2c87848c7687f8d1840204925080831015610b6757809250600091505b610200821615610ba6576ec097ce7bc90715b34b9f10000000006eb6faddc63206c463991fde8fdc9506840204925080831015610ba657809250600091505b610400821615610be5576ec097ce7bc90715b34b9f10000000006eadd8c2cb1adc56015d8ac13e949ad6840204925080831015610be557809250600091505b610800821615610c24576ec097ce7bc90715b34b9f10000000006e9cecd60ec709883c1df984ed528def840204925080831015610c2457809250600091505b61f000821615610d2a57611000821615610c6d576ec097ce7bc90715b34b9f10000000006e7fdce769ba4042c58df22b634da52d840204925080831015610c6d57809250600091505b612000821615610cac576ec097ce7bc90715b34b9f10000000006e54e372216d9b621162728539f1abfe840204925080831015610cac57809250600091505b614000821615610ceb576ec097ce7bc90715b34b9f10000000006e256a7bfb81e938b516478ae184de7e840204925080831015610ceb57809250600091505b618000821615610d2a576ec097ce7bc90715b34b9f10000000006e0744db899706cd40ba8762a820f409840204925080831015610d2a57809250600091505b620f0000821615610e255762010000821615610d74576ec097ce7bc90715b34b9f10000000006d463bd697e97c414af51c38344bac840204925080831015610d7457809250600091505b62020000821615610db2576ec097ce7bc90715b34b9f10000000006c199cc99af8ae745a2741b20f07840204925080831015610db257809250600091505b62040000821615610dee576ec097ce7bc90715b34b9f10000000006a0367f86fa912ef7733a1c6840204925080831015610dee57809250600091505b62080000821615610e25576ec097ce7bc90715b34b9f1000000000650f6bdf3552b2840204925080831015610e2557809250600091505b505092915050565b6000610e39428361083e565b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020819052604090912090810154600382015480610e7c8360016124a1565b14610ee8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f45706f636820616c72656164792066696e616c697a656400000000000000000060448201526064015b60405180910390fd5b3360009081526004840160205260409020548214610f62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45706f63682066756e647320616c726561647920636c61696d656400000000006044820152606401610edf565b336000818152600485016020908152604080832085905585835260018701825280832093835290839052902054801561107e57600182015433600090815260208490526040812055610fb48282612531565b60018401556002830154600090610fd8908990610fd19085612531565b85856119cf565b9050600061100c7f0000000000000000000000000000000000000000000000000000000000000000866003015486866119cf565b9050808560030160008282546110229190612531565b90915550506040805183815260208101839052339173ffffffffffffffffffffffffffffffffffffffff8c16917ff8443c90cb211ae2343332b2cea569829cde13641c5430d8743d3bfd604648a9910160405180910390a35050505b505050505050565b6110918383836115f4565b61083973ffffffffffffffffffffffffffffffffffffffff8416333084611a17565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561111b57600080fd5b505afa15801561112f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526111759190810190612252565b6040516020016105db919061238a565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604080832060038101548452600181018352818420338552928390529220548015611250573360009081526020839052604081208190556001830180548392906111f3908490612531565b9091555061121a905073ffffffffffffffffffffffffffffffffffffffff851633836118fb565b60405181815233907f755bd1d265359f292e14570a577b385062c045da630253bbb9e47da4613d225a9060200160405180910390a25b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020818152604080842060038101548185015480875260018084019095528387208288529387209484015495840154929691959094928692906112b79083612531565b9050808688146112d35760018501546112d090826124a1565b90505b60006112de8d610e2d565b6112e8838e6124f4565b6112f291906124b9565b90508082101561135e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f7420656e6f75676820746f6b656e730000000000000000000000000000006044820152606401610edf565b8a8110156113c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6d696e52657475726e206e6f74206d65740000000000000000000000000000006044820152606401610edf565b888814156113de576113db60018a6124a1565b98505b6113f28d6113eb836125ad565b878b611a75565b828111611456578281141561141c5760018a600201600082825461141691906124a1565b90915550505b8087600201600082825461143091906124a1565b925050819055508b87600301600082825461144b91906124a1565b909155506115039050565b6000816114638e866124f4565b61146d91906124b9565b90508488600201819055508088600301600082825461148c91906124a1565b9091555061149c90508483612531565b8760020160008282546114af91906124a1565b909155506114bf9050818e612531565b8760030160008282546114d291906124a1565b9250508190555060018b60020160008282546114ee91906124a1565b909155506114ff905060018b6124a1565b9950505b8489146115125760038a018990555b61155473ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633308f611a17565b61157573ffffffffffffffffffffffffffffffffffffffff8e1633836118fb565b3373ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff167f4b5796113f074ebf8f11d5bcdeb6349b2fbe47abed78419cdcdbbc15c6fcf8458e846040516115dd929190918252602082015260400190565b60405180910390a350505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020819052604090912060038101549181015490919061163486858484611a75565b6000828152600184016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452909152812080548692906116759084906124a1565b9091555050600082815260018085016020526040822001805486929061169c9084906124a1565b909155506116ae90508584848461171d565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f769aa1c430040323f5ba8e7f29f697e564ae1ac0b7fd9b251c16032331a221a28660405161170d91815260200190565b60405180910390a3505050505050565b73ffffffffffffffffffffffffffffffffffffffff841660009081526004840160205260409020548082116117525750611250565b6000818152600185016020908152604080832073ffffffffffffffffffffffffffffffffffffffff891684529091529020546117b8575073ffffffffffffffffffffffffffffffffffffffff841660009081526004840160205260409020829055611250565b60006117ce60026117c98486612531565b611bcf565b905060006117dd878785611be7565b9050600182111561180a576117fd87876117f88660016124a1565b611be7565b61180790826124a1565b90505b6118148782611cc9565b600086600101600085600161182991906124a1565b81526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff8c168252909252902054159050600283148061186c5750805b6118805761187b8460016124a1565b611882565b855b73ffffffffffffffffffffffffffffffffffffffff891660009081526004890160205260409020555050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040812080548392906118e9908490612531565b90915550506000805491909103905550565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526108399084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611d0e565b6000816119dc84866124f4565b6119e691906124b9565b90508015611a0f57611a0f73ffffffffffffffffffffffffffffffffffffffff861633836118fb565b949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526112509085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161194d565b73ffffffffffffffffffffffffffffffffffffffff841660009081526002602081815260408084208585526001808201909352908420928301549290910154909291611ac091612531565b9050838314611aea576000848152600180840160205260409091200154611ae790826124a1565b90505b600080861215611b0c57611afd866125ad565b611b079083612531565b611b16565b611b1686836124a1565b9050428215611b255782611b28565b60015b82611b33428b61083e565b611b3d91906124f4565b611b4791906124b9565b73ffffffffffffffffffffffffffffffffffffffff909816600090815260026020526040902064ffffffffff919091167affffffffffffffffffffffffffffffffffffffffffffffffffffff90981665010000000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001697909717909655505050505050565b6000818310611bde5781611be0565b825b9392505050565b6000818152600183016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120548015611cc157600083815260018086016020526040909120600381015491015480611c4484846124f4565b611c4e91906124b9565b6000868152600188016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8c1684529091528120559350611c8c8382612531565b6000868152600180890160205260409091200155611caa8483612531565b600086815260018801602052604090206003015550505b509392505050565b80600080828254611cda91906124a1565b909155505073ffffffffffffffffffffffffffffffffffffffff909116600090815260016020526040902080549091019055565b6000611d70826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611e1a9092919063ffffffff16565b8051909150156108395780806020019051810190611d8e919061213f565b610839576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610edf565b6060611a0f848460008585843b611e8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610edf565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611eb69190612329565b60006040518083038185875af1925050503d8060008114611ef3576040519150601f19603f3d011682016040523d82523d6000602084013e611ef8565b606091505b5091509150611f08828286611f13565b979650505050505050565b60608315611f22575081611be0565b825115611f325782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edf9190612401565b6040518061028001604052806014906020820280368337509192915050565b60008083601f840112611f9757600080fd5b50813567ffffffffffffffff811115611faf57600080fd5b6020830191508360208260051b8501011115611fca57600080fd5b9250929050565b600060208284031215611fe357600080fd5b8135611be081612673565b6000806040838503121561200157600080fd5b823561200c81612673565b946020939093013593505050565b6000806000806040858703121561203057600080fd5b843567ffffffffffffffff8082111561204857600080fd5b61205488838901611f85565b9096509450602087013591508082111561206d57600080fd5b5061207a87828801611f85565b95989497509550505050565b6000602080838503121561209957600080fd5b823567ffffffffffffffff808211156120b157600080fd5b818501915085601f8301126120c557600080fd5b8135818111156120d7576120d7612644565b8060051b91506120e8848301612452565b8181528481019084860184860187018a101561210357600080fd5b600095505b83861015612132578035945061211d85612673565b84835260019590950194918601918601612108565b5098975050505050505050565b60006020828403121561215157600080fd5b81518015158114611be057600080fd5b6000806040838503121561217457600080fd5b823561217f81612673565b9150602083013561218f81612673565b809150509250929050565b6000806000606084860312156121af57600080fd5b83356121ba81612673565b925060208401356121ca81612673565b929592945050506040919091013590565b6000806000606084860312156121f057600080fd5b83356121fb81612673565b925060208401359150604084013561221281612673565b809150509250925092565b60008060006060848603121561223257600080fd5b833561223d81612673565b95602085013595506040909401359392505050565b60006020828403121561226457600080fd5b815167ffffffffffffffff8082111561227c57600080fd5b818401915084601f83011261229057600080fd5b8151818111156122a2576122a2612644565b6122d360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612452565b91508082528560208285010111156122ea57600080fd5b6122fb816020840160208601612548565b50949350505050565b6000806040838503121561231757600080fd5b82359150602083013561218f81612673565b6000825161233b818460208701612548565b9190910192915050565b7f466565436f6c6c6563746f723a2000000000000000000000000000000000000081526000825161237d81600e850160208701612548565b91909101600e0192915050565b7f6665652d000000000000000000000000000000000000000000000000000000008152600082516123c2816004850160208701612548565b9190910160040192915050565b6102808101818360005b60148110156123f85781518352602092830192909101906001016123d9565b50505092915050565b6020815260008251806020840152612420816040850160208701612548565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561249957612499612644565b604052919050565b600082198211156124b4576124b46125e6565b500190565b6000826124ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561252c5761252c6125e6565b500290565b600082821015612543576125436125e6565b500390565b60005b8381101561256357818101518382015260200161254b565b838111156112505750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156125a6576125a66125e6565b5060010190565b60007f80000000000000000000000000000000000000000000000000000000000000008214156125df576125df6125e6565b5060000390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461269557600080fd5b5056fea2646970667358221220fadf5b0056a2f043f2a568ab5065db5b15682815c9ab48adc0ad386d7947207b64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2874,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2878,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1470,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IERC20)727,t_struct(TokenInfo)1461_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)727": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)727,t_struct(TokenInfo)1461_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)727",
        "label": "mapping(contract IERC20 => struct FeeCollector.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)1461_storage"
      },
      "t_mapping(t_uint256,t_struct(EpochBalance)1443_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FeeCollector.EpochBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(EpochBalance)1443_storage"
      },
      "t_struct(EpochBalance)1443_storage": {
        "encoding": "inplace",
        "label": "struct FeeCollector.EpochBalance",
        "members": [
          {
            "astId": 1436,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "balances",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1438,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "totalSupply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1440,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "traded",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1442,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "tokenBalance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenInfo)1461_storage": {
        "encoding": "inplace",
        "label": "struct FeeCollector.TokenInfo",
        "members": [
          {
            "astId": 1445,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "lastTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 1447,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "lastValue",
            "offset": 5,
            "slot": "0",
            "type": "t_uint216"
          },
          {
            "astId": 1452,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "epochBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(EpochBalance)1443_storage)"
          },
          {
            "astId": 1454,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "firstUnprocessedEpoch",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1456,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "currentEpoch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1460,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "firstUserUnprocessedEpoch",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}